<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Parkinson's Symptom Diary (Hourly)</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    .form-group {
      margin-bottom: 15px;
    }
    label {
      display: block;
      margin-bottom: 5px;
    }
    select, input {
      width: 100%;
      padding: 10px;
      margin-bottom: 10px;
      font-size: 1em;
    }
    h2 {
      margin-top: 30px;
    }
    .hour-block {
      border: 1px solid #ccc;
      padding: 15px;
      margin-bottom: 15px;
    }
    #hourly-logs {
      display: none;
    }
    #submission-status {
      margin-top: 20px;
      font-weight: bold;
      color: green;
    }
  </style>
  <script src="https://apis.google.com/js/api.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <h1>Parkinson's Symptom Diary (Hourly)</h1>

  <!-- Date picker -->
  <div>
    <label for="entry-date">Today's Date:</label>
    <input type="date" id="entry-date" value="">
  </div>

  <!-- Symptom selection step -->
  <div id="symptom-selection">
    <h2>Select 3 Symptoms to Track</h2>

    <div class="form-group">
      <label for="symptom1">Symptom 1</label>
      <select id="symptom1" required>
        <option value="">Select a Symptom</option>
        <option value="Tremor">Tremor</option>
        <option value="Bradykinesia">Bradykinesia</option>
        <option value="Rigidity">Rigidity</option>
        <option value="Postural Instability">Postural Instability</option>
        <option value="Fatigue">Fatigue</option>
        <option value="Sleep Problems">Sleep Problems</option>
        <option value="Anxiety">Anxiety</option>
        <option value="Cognitive Difficulties">Cognitive Difficulties</option>
      </select>
    </div>

    <div class="form-group">
      <label for="symptom2">Symptom 2</label>
      <select id="symptom2" required>
        <option value="">Select a Symptom</option>
        <option value="Tremor">Tremor</option>
        <option value="Bradykinesia">Bradykinesia</option>
        <option value="Rigidity">Rigidity</option>
        <option value="Postural Instability">Postural Instability</option>
        <option value="Fatigue">Fatigue</option>
        <option value="Sleep Problems">Sleep Problems</option>
        <option value="Anxiety">Anxiety</option>
        <option value="Cognitive Difficulties">Cognitive Difficulties</option>
      </select>
    </div>

    <div class="form-group">
      <label for="symptom3">Symptom 3</label>
      <select id="symptom3" required>
        <option value="">Select a Symptom</option>
        <option value="Tremor">Tremor</option>
        <option value="Bradykinesia">Bradykinesia</option>
        <option value="Rigidity">Rigidity</option>
        <option value="Postural Instability">Postural Instability</option>
        <option value="Fatigue">Fatigue</option>
        <option value="Sleep Problems">Sleep Problems</option>
        <option value="Anxiety">Anxiety</option>
        <option value="Cognitive Difficulties">Cognitive Difficulties</option>
      </select>
    </div>

    <button id="startTracking" type="button">Start Tracking Symptoms</button>
  </div>

  <!-- Hourly symptom recording section -->
  <form id="symptomForm">
    <div id="hourly-logs"></div>

    <button type="submit">Submit</button>
  </form>

  <div id="submission-status"></div>

  <!-- Hourly Chart Display -->
  <canvas id="hourlyChart" width="400" height="200"></canvas>

  <!-- Weekly Chart Display -->
  <canvas id="weeklyChart" width="400" height="200"></canvas>

  <script>
    let GoogleAuth;

    // Load the Google API client and initialize it
    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    // Initialize the Google API client with credentials
    function initClient() {
      gapi.client.init({
        clientId: '655026748571-vdaqbn37jduofbmbio3hj5pg59egqus7.apps.googleusercontent.com',
        discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"],
        scope: 'https://www.googleapis.com/auth/drive.file'
      }).then(function () {
        GoogleAuth = gapi.auth2.getAuthInstance();
      });
    }

    // Sign in with Google
    function handleSignInClick() {
      GoogleAuth.signIn();
    }

    // Sign out of Google
    function handleSignOutClick() {
      GoogleAuth.signOut();
    }

    // Save the data to Google Drive
    function saveToDrive(data) {
      const fileContent = JSON.stringify(data); // Data to save
      const blob = new Blob([fileContent], { type: 'application/json' });

      const metadata = {
        name: 'symptom_diary.json',
        mimeType: 'application/json'
      };

      const accessToken = gapi.auth.getToken().access_token; // Get the current access token
      const form = new FormData();
      form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));
      form.append('file', blob);

      fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart', {
        method: 'POST',
        headers: new Headers({ 'Authorization': 'Bearer ' + accessToken }),
        body: form
      }).then(response => response.json()).then(data => {
        console.log(data);
        document.getElementById('submission-status').innerText = "Your symptoms for the day have been logged successfully.";
      }).catch(error => {
        console.error('Error saving to Google Drive:', error);
        document.getElementById('submission-status').innerText = "An error occurred while saving your data. Please try again.";
        document.getElementById('submission-status').style.color = 'red';
      });
    }

    // Function to get today's date in YYYY-MM-DD format
    function getTodayDate() {
      const today = new Date();
      return today.toISOString().split('T')[0]; // Get YYYY-MM-DD format
    }

    // Function to create the hourly blocks with selected symptoms
    function createHourBlock(hour, symptom1, symptom2, symptom3) {
      return `
        <div class="hour-block">
          <h2>Hour: ${hour}:00 - ${hour + 1}:00</h2>
          <div class="form-group">
            <label>${symptom1}</label>
            <select name="severity${hour}1" required>
              <option value="not_recorded" selected>Not Recorded</option>
              <option value="0">0 - NONE</option>
              <option value="1">1 - SLIGHT</option>
              <option value="2">2 - MODERATE</option>
              <option value="3">3 - SEVERE</option>
            </select>
          </div>

          <div class="form-group">
            <label>${symptom2}</label>
            <select name="severity${hour}2" required>
              <option value="not_recorded" selected>Not Recorded</option>
              <option value="0">0 - NONE</option>
              <option value="1">1 - SLIGHT</option>
              <option value="2">2 - MODERATE</option>
              <option value="3">3 - SEVERE</option>
            </select>
          </div>

          <div class="form-group">
            <label>${symptom3}</label>
            <select name="severity${hour}3" required>
              <option value="not_recorded" selected>Not Recorded</option>
              <option value="0">0 - NONE</option>
              <option value="1">1 - SLIGHT</option>
              <option value="2">2 - MODERATE</option>
              <option value="3">3 - SEVERE</option>
            </select>
          </div>
        </div>
      `;
    }

    // Populate the date input with today's date
    document.getElementById('entry-date').value = getTodayDate();

    // Handle start tracking symptoms
    document.getElementById('startTracking').addEventListener('click', function() {
      const symptom1 = document.getElementById('symptom1').value;
      const symptom2 = document.getElementById('symptom2').value;
      const symptom3 = document.getElementById('symptom3').value;

      if (!symptom1 || !symptom2 || !symptom3) {
        alert('Please select all 3 symptoms.');
        return;
      }

      // Hide the symptom selection form and show the hourly log form
      document.getElementById('symptom-selection').style.display = 'none';
      document.getElementById('hourly-logs').style.display = 'block';

      // Create hourly logs for the selected symptoms
      const hourlyLogsContainer = document.getElementById('hourly-logs');
      hourlyLogsContainer.innerHTML = '';
      for (let hour = 0; hour < 24; hour++) {
        hourlyLogsContainer.innerHTML += createHourBlock(hour, symptom1, symptom2, symptom3);
      }
    });

    // Handle form submission
    document.getElementById('symptomForm').addEventListener('submit', function(event) {
      event.preventDefault();

      const date = document.getElementById('entry-date').value;

      // Collect and store data for each hour
      const symptomData = { date: date, hourlyData: {} };
      for (let hour = 0; hour < 24; hour++) {
        const severity1 = document.querySelector(`[name="severity${hour}1"]`).value;
        const severity2 = document.querySelector(`[name="severity${hour}2"]`).value;
        const severity3 = document.querySelector(`[name="severity${hour}3"]`).value;

        symptomData.hourlyData[hour] = {
          symptom1: severity1,
          symptom2: severity2,
          symptom3: severity3,
        };
      }

      // Save the data in Google Drive
      saveToDrive(symptomData);
    });

    // Drawing Hourly Chart for symptoms
    function drawHourlyChart(symptomData) {
      const ctx = document.getElementById('hourlyChart').getContext('2d');
      const data = {
        labels: [...Array(24).keys()].map(hour => `${hour}:00`),
        datasets: [
          {
            label: 'Symptom 1',
            data: Object.values(symptomData).map(entry => entry.symptom1),
            borderColor: 'rgba(255, 99, 132, 1)',
            fill: false
          },
          {
            label: 'Symptom 2',
            data: Object.values(symptomData).map(entry => entry.symptom2),
            borderColor: 'rgba(54, 162, 235, 1)',
            fill: false
          },
          {
            label: 'Symptom 3',
            data: Object.values(symptomData).map(entry => entry.symptom3),
            borderColor: 'rgba(75, 192, 192, 1)',
            fill: false
          }
        ]
      };

      const options = {
        scales: {
          y: {
            beginAtZero: true,
            max: 3
          }
        }
      };

      new Chart(ctx, {
        type: 'line',
        data: data,
        options: options
      });
    }

    // Weekly Trend Chart
    function drawWeeklyChart(weeklyData) {
      const ctx = document.getElementById('weeklyChart').getContext('2d');
      
      const labels = Object.keys(weeklyData);

      const data = {
        labels: labels,
        datasets: [
          {
            label: 'Symptom 1',
            data: labels.map(date => weeklyData[date].symptom1Average),
            borderColor: 'rgba(255, 99, 132, 1)',
            fill: false
          },
          {
            label: 'Symptom 2',
            data: labels.map(date => weeklyData[date].symptom2Average),
            borderColor: 'rgba(54, 162, 235, 1)',
            fill: false
          },
          {
            label: 'Symptom 3',
            data: labels.map(date => weeklyData[date].symptom3Average),
            borderColor: 'rgba(75, 192, 192, 1)',
            fill: false
          }
        ]
      };

      const options = {
        scales: {
          y: {
            beginAtZero: true,
            max: 3
          }
        }
      };

      new Chart(ctx, {
        type: 'line',
        data: data,
        options: options
      });
    }
  </script>
</body>
</html>
